{
  "tasks": [
    {
      "id": 1,
      "title": "[MVP] 프로젝트 인프라 및 인증 구축",
      "description": "React 프로젝트 초기화, Supabase 통합 구성 및 사용자 인증 흐름 구현",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "details": "Create React App 또는 Vite를 사용하여 새 React 프로젝트를 생성합니다. 데이터베이스, 인증 및 스토리지를 위한 Supabase 클라이언트 구성을 설정합니다. Supabase Auth를 사용하여 이메일/비밀번호 인증으로 회원가입/로그인 컴포넌트를 구현합니다. 인증된 사용자를 위한 보호된 경로와 온보딩을 위한 공개 경로를 만듭니다. Vercel 또는 Netlify를 사용하여 자동 배포를 위한 CI/CD 파이프라인을 설정합니다.",
      "testStrategy": "사용자 등록, 로그인 및 로그아웃 기능을 확인합니다. 보호된 경로가 인증되지 않은 사용자를 리디렉션하는지 테스트합니다. 인증 흐름에 대한 양식 유효성 검사 및 오류 처리를 검증합니다.",
      "subtasks": [
        {
          "id": 1,
          "title": "React 프로젝트 초기화 및 기본 구조 설정",
          "description": "Vite를 사용하여 React 프로젝트를 초기화하고 필요한 기본 폴더 구조와 라이브러리를 설정합니다.",
          "dependencies": [],
          "details": "1. Vite를 사용하여 React 프로젝트 생성: `npm create vite@latest my-app --template react-ts`\n2. 필요한 기본 라이브러리 설치: `npm install react-router-dom axios styled-components`\n3. 프로젝트 폴더 구조 설정:\n   - `/src/components`: 재사용 가능한 UI 컴포넌트\n   - `/src/pages`: 페이지 컴포넌트\n   - `/src/hooks`: 커스텀 훅\n   - `/src/utils`: 유틸리티 함수\n   - `/src/services`: API 서비스\n   - `/src/contexts`: React Context\n4. 기본 라우팅 설정: React Router를 사용하여 기본 라우팅 구조 구현\n5. 테스트: `npm run dev`로 프로젝트가 정상적으로 실행되는지 확인",
          "status": "done",
          "parentTaskId": 1
        },
        {
          "id": 2,
          "title": "Supabase 프로젝트 생성 및 클라이언트 설정",
          "description": "Supabase 프로젝트를 생성하고 React 애플리케이션에 Supabase 클라이언트를 설정합니다.",
          "dependencies": [
            1
          ],
          "details": "1. Supabase 계정 생성 및 새 프로젝트 설정\n2. Supabase 클라이언트 라이브러리 설치: `npm install @supabase/supabase-js`\n3. 환경 변수 설정:\n   - `.env` 파일 생성\n   - `VITE_SUPABASE_URL`과 `VITE_SUPABASE_ANON_KEY` 환경 변수 추가\n4. Supabase 클라이언트 초기화 파일 생성 (`/src/services/supabase.ts`):\n   ```typescript\n   import { createClient } from '@supabase/supabase-js';\n   \n   const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n   const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n   \n   export const supabase = createClient(supabaseUrl, supabaseAnonKey);\n   ```\n5. 테스트: 간단한 쿼리를 실행하여 Supabase 연결 확인",
          "status": "done",
          "parentTaskId": 1
        },
        {
          "id": 3,
          "title": "인증 컴포넌트 및 인증 상태 관리 구현",
          "description": "회원가입, 로그인, 로그아웃 컴포넌트를 구현하고 인증 상태를 관리하는 Context를 생성합니다.",
          "dependencies": [
            2
          ],
          "details": "1. 인증 Context 생성 (`/src/contexts/AuthContext.tsx`):\n   - 현재 사용자 상태 관리\n   - 로그인, 로그아웃, 회원가입 함수 제공\n   - 인증 상태 로딩 처리\n2. 회원가입 컴포넌트 구현 (`/src/components/auth/SignUp.tsx`):\n   - 이메일, 비밀번호 입력 폼\n   - Supabase Auth API를 사용한 회원가입 기능\n   - 오류 처리 및 유효성 검사\n3. 로그인 컴포넌트 구현 (`/src/components/auth/SignIn.tsx`):\n   - 이메일, 비밀번호 입력 폼\n   - Supabase Auth API를 사용한 로그인 기능\n   - 오류 처리\n4. 로그아웃 기능 구현\n5. 테스트: 회원가입, 로그인, 로그아웃 기능이 정상적으로 작동하는지 확인",
          "status": "done",
          "parentTaskId": 1
        },
        {
          "id": 4,
          "title": "보호된 라우트 및 인증 흐름 구현",
          "description": "인증된 사용자만 접근할 수 있는 보호된 라우트와 인증 흐름을 구현합니다.",
          "dependencies": [
            3
          ],
          "details": "1. 보호된 라우트 컴포넌트 생성 (`/src/components/auth/ProtectedRoute.tsx`):\n   - 인증되지 않은 사용자를 로그인 페이지로 리디렉션\n   - 인증 상태 로딩 중 로딩 UI 표시\n2. 공개 라우트 설정:\n   - 로그인 페이지\n   - 회원가입 페이지\n   - 랜딩 페이지\n3. 보호된 라우트 설정:\n   - 대시보드\n   - 프로필 페이지\n   - 설정 페이지\n4. 인증 상태에 따른 네비게이션 UI 조정\n5. 세션 유지 기능 구현:\n   - 페이지 새로고침 시 인증 상태 유지\n   - 세션 만료 처리\n6. 테스트: 인증되지 않은 사용자가 보호된 라우트에 접근할 수 없는지 확인",
          "status": "done",
          "parentTaskId": 1
        },
        {
          "id": 5,
          "title": "CI/CD 파이프라인 및 배포 환경 설정",
          "description": "Vercel 또는 Netlify를 사용하여 자동 배포를 위한 CI/CD 파이프라인을 설정합니다.",
          "dependencies": [
            1,
            2,
            3,
            4
          ],
          "details": "1. 프로젝트 GitHub 저장소 설정:\n   - 새 GitHub 저장소 생성\n   - 프로젝트 코드 푸시\n   - `.gitignore` 파일에 환경 변수 파일 추가\n2. Vercel 계정 생성 및 프로젝트 설정:\n   - GitHub 저장소 연결\n   - 환경 변수 설정 (Supabase URL 및 API 키)\n   - 빌드 설정 구성\n3. 자동 배포 설정:\n   - main 브랜치에 푸시 시 자동 배포 설정\n   - 풀 리퀘스트에 대한 프리뷰 배포 설정\n4. 커스텀 도메인 설정 (선택 사항)\n5. 테스트: 코드 변경 사항을 푸시하여 자동 배포가 정상적으로 작동하는지 확인",
          "status": "done",
          "parentTaskId": 1
        }
      ]
    },
    {
      "id": 2,
      "title": "[MVP] 온보딩 및 꿈 입력 흐름 구현",
      "description": "신규 사용자를 위한 온보딩 경험 및 꿈 입력 인터페이스 생성",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "앱 기능을 소개하는 다단계 온보딩 프로세스를 설계하고 구현합니다. 사용자가 제목, 설명 및 선택적 태그로 꿈을 입력할 수 있는 양식을 만듭니다. 데이터 모델 사양에 따라 사용자 및 꿈 모델에 대한 Supabase 테이블을 설정합니다. 적절한 유효성 검사가 포함된 꿈 저장 기능을 구현합니다. 첫 사용자를 위한 환영 화면 및 안내를 추가합니다.",
      "testStrategy": "다양한 입력 시나리오로 전체 온보딩 흐름을 테스트합니다. 꿈 데이터가 Supabase에 올바르게 저장되는지 확인합니다. 필수 필드에 대한 유효성 검사 및 오류 처리를 확인합니다.",
      "subtasks": [
        {
          "id": 1,
          "title": "앱뷰 공통 레이아웃(AppShell) 및 하단 탭바 설계/구현",
          "description": "퍼플/그라데이션 테마, 카드형 UI, 하단 탭바 등 모바일 앱 스타일의 공통 레이아웃과 네비게이션 컴포넌트 설계 및 구현. Tailwind CSS 기반으로 max-w, 중앙정렬, 반응형, 카드/탭바/상단바 등 앱뷰 구조를 만든다. 홈(피드) 페이지에 적용해 PC/모바일 모두 네이티브앱처럼 보이도록 한다.",
          "details": "1. Tailwind CSS 테마 및 글로벌 스타일 세팅\n2. /src/components/layout/AppShell.tsx 생성 및 앱뷰 레이아웃 구현\n3. /src/components/layout/BottomTabBar.tsx 생성 및 하단 탭바 구현\n4. 카드형 UI, 버튼, 태그 등 공통 컴포넌트 설계\n5. 홈(피드) 페이지에 앱뷰 스타일 적용\n6. max-w-[430px] mx-auto min-h-screen 등 Tailwind 유틸리티 활용\n7. 모바일/PC 반응형 및 PWA 지원 구조 설계\n8. 테스트: PC/모바일에서 앱뷰가 일관되게 보이는지 확인",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 2
        }
      ]
    },
    {
      "id": 3,
      "title": "[MVP] AI 기반 목표 제안 시스템 개발",
      "description": "사용자 꿈을 기반으로 개인화된 목표를 생성하기 위한 OpenAI/Claude API 통합",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "OpenAI/Claude API 통합을 설정합니다. 사용자 꿈 데이터를 처리하고 적절한 일일/주간/월간 목표를 생성하는 서비스를 만듭니다. Supabase에서 목표 데이터 모델을 구현합니다. 품질 목표 제안을 보장하기 위한 AI 프롬프트 엔지니어링을 설계합니다. 사용자가 제안된 목표를 편집, 우선순위 지정 또는 거부할 수 있는 옵션이 있는 UI를 구축합니다. 시간 프레임(일일/주간/월간)별 목표 분류를 포함합니다.",
      "testStrategy": "샘플 꿈 입력으로 API 통합을 테스트합니다. 목표 생성 품질 및 관련성을 확인합니다. 최소한의 또는 비정상적인 꿈 설명이 있는 엣지 케이스를 테스트합니다. 데이터베이스에서 목표 저장 및 검색을 검증합니다.",
      "subtasks": [
        {
          "id": 1,
          "title": "OpenAI/Claude API 연동 및 기본 통신 설정",
          "description": "AI 서비스와의 통신을 위한 기본 인프라 구축 및 API 연동 설정",
          "dependencies": [],
          "details": "1. OpenAI와 Claude API 키 발급 및 환경 변수 설정\n2. API 클라이언트 래퍼 클래스 구현 (요청 전송, 응답 처리, 오류 처리)\n3. API 호출 제한 및 비용 관리를 위한 레이트 리미팅 구현\n4. 기본 프롬프트 템플릿 구조 설계\n5. 간단한 테스트 엔드포인트 구현으로 API 연결 확인\n6. 테스트: 기본 프롬프트로 API 응답 확인 및 응답 형식 검증",
          "status": "in-progress",
          "parentTaskId": 3
        },
        {
          "id": 2,
          "title": "Supabase 목표 데이터 모델 설계 및 구현",
          "description": "사용자 꿈과 생성된 목표를 저장하기 위한 데이터베이스 스키마 설계 및 구현",
          "dependencies": [],
          "details": "1. 사용자, 꿈, 목표 간의 관계를 정의하는 ERD 설계\n2. Supabase에 필요한 테이블 생성 (users, dreams, goals, goal_categories)\n3. 목표 테이블에 시간 프레임(일일/주간/월간) 필드 추가\n4. 목표 상태 관리를 위한 필드 추가 (제안됨, 수락됨, 거부됨, 완료됨 등)\n5. 필요한 인덱스 및 외래 키 제약 조건 설정\n6. TypeScript 인터페이스/타입 정의\n7. 테스트: CRUD 작업을 통한 데이터 모델 검증",
          "status": "pending",
          "parentTaskId": 3
        },
        {
          "id": 3,
          "title": "AI 프롬프트 엔지니어링 및 목표 생성 로직 개발",
          "description": "사용자 꿈 데이터를 분석하고 적절한 목표를 생성하기 위한 AI 프롬프트 설계",
          "dependencies": [
            1,
            2
          ],
          "details": "1. 효과적인 목표 생성을 위한 프롬프트 템플릿 설계\n2. 꿈 데이터에서 핵심 주제와 패턴을 추출하는 프롬프트 개발\n3. 일일/주간/월간 목표 생성을 위한 별도 프롬프트 최적화\n4. SMART 목표 원칙(구체적, 측정 가능, 달성 가능, 관련성, 시간 제한)을 적용한 프롬프트 구성\n5. 목표 품질 향상을 위한 프롬프트 반복 테스트 및 개선\n6. 응답 파싱 및 구조화 로직 구현\n7. 테스트: 다양한 꿈 시나리오에 대한 목표 생성 품질 평가",
          "status": "pending",
          "parentTaskId": 3
        },
        {
          "id": 4,
          "title": "꿈 데이터 처리 및 목표 생성 서비스 구현",
          "description": "사용자 꿈 데이터를 수집하고 AI를 통해 목표로 변환하는 서비스 개발",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "1. 꿈 데이터 입력 및 처리를 위한 서비스 레이어 구현\n2. 꿈 데이터를 AI 프롬프트에 통합하는 로직 개발\n3. AI 응답에서 목표 데이터 추출 및 구조화\n4. 생성된 목표를 Supabase에 저장하는 기능 구현\n5. 목표 중복 방지 및 품질 검증 로직 추가\n6. 비동기 처리를 위한 작업 큐 구현 (선택적)\n7. 테스트: 전체 파이프라인 통합 테스트 (꿈 입력부터 목표 저장까지)",
          "status": "pending",
          "parentTaskId": 3
        },
        {
          "id": 5,
          "title": "목표 관리 API 엔드포인트 개발",
          "description": "목표 조회, 편집, 우선순위 지정, 거부 등을 위한 RESTful API 개발",
          "dependencies": [
            2,
            4
          ],
          "details": "1. 사용자별 목표 조회 엔드포인트 구현 (시간 프레임별 필터링 포함)\n2. 목표 상세 조회 엔드포인트 구현\n3. 목표 수정 엔드포인트 구현 (사용자 편집 지원)\n4. 목표 상태 변경 엔드포인트 구현 (수락, 거부, 완료 등)\n5. 목표 우선순위 지정 엔드포인트 구현\n6. 목표 삭제 엔드포인트 구현\n7. API 인증 및 권한 검사 로직 추가\n8. 테스트: Postman/Insomnia를 사용한 API 엔드포인트 테스트",
          "status": "pending",
          "parentTaskId": 3
        },
        {
          "id": 6,
          "title": "목표 제안 및 관리 UI 구현",
          "description": "사용자가 제안된 목표를 확인하고 관리할 수 있는 사용자 인터페이스 개발",
          "dependencies": [
            5
          ],
          "details": "1. 시간 프레임별(일일/주간/월간) 목표 탭 UI 설계 및 구현\n2. 목표 카드 컴포넌트 개발 (목표 내용, 상태, 우선순위 표시)\n3. 목표 편집 모달/페이지 구현\n4. 목표 수락/거부/완료 기능 UI 구현\n5. 목표 우선순위 드래그 앤 드롭 기능 구현\n6. 새로운 목표 제안 요청 UI 구현\n7. 반응형 디자인 적용 (모바일/데스크톱)\n8. 테스트: 사용자 시나리오 기반 UI 테스트 및 사용성 평가",
          "status": "pending",
          "parentTaskId": 3
        }
      ]
    },
    {
      "id": 4,
      "title": "[1차] 꿈 시각화 도구 생성",
      "description": "사용자가 꿈을 시각화할 수 있는 대화형 드래그 앤 드롭 인터페이스 구축",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "medium",
      "details": "react-dnd 또는 react-beautiful-dnd와 같은 라이브러리를 사용하여 캔버스 기반 시각화 도구를 구현합니다. 텍스트, 이미지, 색상 및 기타 시각적 요소를 추가하기 위한 컴포넌트를 만듭니다. Supabase Storage를 사용하여 이미지 업로드 기능을 설정합니다. 시각화 데이터에 대한 저장/로드 기능을 구현합니다. 시각화를 이미지로 저장하는 내보내기 옵션을 추가합니다. 꿈 모델에 저장될 시각화 데이터 구조를 설계합니다.",
      "testStrategy": "다양한 브라우저에서 드래그 앤 드롭 기능을 테스트합니다. 이미지 업로드 및 렌더링을 확인합니다. 시각화 상태 저장 및 로드를 테스트합니다. 내보내기 기능이 사용 가능한 이미지 파일을 생성하는지 검증합니다.",
      "subtasks": [
        {
          "id": 1,
          "title": "캔버스 기반 드래그 앤 드롭 인터페이스 구현",
          "description": "react-beautiful-dnd 라이브러리를 사용하여 기본 캔버스 영역과 드래그 앤 드롭 기능을 구현합니다.",
          "dependencies": [],
          "details": "1. react-beautiful-dnd 라이브러리 설치\n2. 캔버스 컴포넌트 생성 (Canvas.tsx)\n3. 드래그 가능한 영역(DraggableArea)과 드롭 영역(DropArea) 컴포넌트 구현\n4. 캔버스 내에서 요소 위치 조정 기능 구현\n5. 캔버스 크기 조절 및 확대/축소 기능 추가\n6. 테스트: 간단한 요소를 드래그하여 캔버스에 배치하고 위치 조정이 가능한지 확인",
          "status": "pending",
          "parentTaskId": 4
        },
        {
          "id": 2,
          "title": "시각화 요소 컴포넌트 개발",
          "description": "꿈 시각화에 필요한 다양한 시각적 요소(텍스트, 이미지, 도형, 색상 등)를 위한 컴포넌트를 개발합니다.",
          "dependencies": [
            1
          ],
          "details": "1. 텍스트 요소 컴포넌트 구현 (크기, 색상, 폰트 조절 가능)\n2. 이미지 요소 컴포넌트 구현 (크기 조절, 회전 기능 포함)\n3. 도형 요소 컴포넌트 구현 (원, 사각형, 삼각형 등)\n4. 색상 팔레트 컴포넌트 구현\n5. 요소 속성 편집 패널 구현 (선택된 요소의 속성 변경)\n6. 테스트: 각 컴포넌트가 캔버스에 추가되고 속성이 올바르게 편집되는지 확인",
          "status": "pending",
          "parentTaskId": 4
        },
        {
          "id": 3,
          "title": "Supabase Storage 이미지 업로드 기능 구현",
          "description": "사용자가 자신의 이미지를 업로드하고 시각화에 사용할 수 있도록 Supabase Storage 연동 기능을 구현합니다.",
          "dependencies": [
            2
          ],
          "details": "1. Supabase 클라이언트 설정 및 Storage 버킷 생성\n2. 이미지 업로드 컴포넌트 구현 (ImageUploader.tsx)\n3. 드래그 앤 드롭 또는 파일 선택을 통한 이미지 업로드 기능 구현\n4. 업로드 진행 상태 표시 기능 추가\n5. 업로드된 이미지 미리보기 및 캔버스에 추가 기능 구현\n6. 테스트: 이미지 업로드 후 스토리지에 저장되고 캔버스에 추가되는지 확인",
          "status": "pending",
          "parentTaskId": 4
        },
        {
          "id": 4,
          "title": "시각화 데이터 구조 설계 및 상태 관리 구현",
          "description": "시각화 요소들의 데이터 구조를 설계하고 상태 관리 시스템을 구현하여 요소들의 추가, 수정, 삭제를 관리합니다.",
          "dependencies": [
            2,
            3
          ],
          "details": "1. 시각화 데이터 모델 정의 (요소 유형, 위치, 크기, 스타일 등 포함)\n2. Redux 또는 Context API를 사용한 상태 관리 시스템 구현\n3. 요소 추가, 수정, 삭제, 순서 변경 액션 구현\n4. 실행 취소/다시 실행(Undo/Redo) 기능 구현\n5. 선택된 요소 상태 관리 구현\n6. 테스트: 요소 추가, 수정, 삭제 및 실행 취소/다시 실행 기능이 올바르게 작동하는지 확인",
          "status": "pending",
          "parentTaskId": 4
        },
        {
          "id": 5,
          "title": "시각화 저장 및 불러오기 기능 구현",
          "description": "사용자의 시각화 작업을 Supabase 데이터베이스에 저장하고 불러올 수 있는 기능을 구현합니다.",
          "dependencies": [
            4
          ],
          "details": "1. Supabase 데이터베이스에 시각화 데이터를 저장할 테이블 설계\n2. 저장 기능 구현 (현재 캔버스 상태를 JSON으로 변환하여 저장)\n3. 자동 저장 기능 구현 (일정 시간마다 또는 변경 시)\n4. 저장된 시각화 목록 조회 기능 구현\n5. 저장된 시각화 불러오기 기능 구현\n6. 테스트: 시각화 저장 후 다시 불러왔을 때 모든 요소와 속성이 정확히 복원되는지 확인",
          "status": "pending",
          "parentTaskId": 4
        },
        {
          "id": 6,
          "title": "시각화 내보내기 기능 구현",
          "description": "완성된 시각화를 이미지 파일로 내보내는 기능을 구현합니다.",
          "dependencies": [
            4,
            5
          ],
          "details": "1. html2canvas 또는 dom-to-image 라이브러리 설치\n2. 캔버스 영역을 이미지로 변환하는 기능 구현\n3. 다양한 이미지 형식(PNG, JPEG, SVG 등) 지원 구현\n4. 이미지 해상도 및 품질 옵션 설정 기능 추가\n5. 내보낸 이미지를 다운로드하거나 소셜 미디어에 공유하는 기능 구현\n6. 테스트: 다양한 요소가 포함된 시각화를 여러 형식으로 내보내고 품질 확인",
          "status": "pending",
          "parentTaskId": 4
        }
      ]
    },
    {
      "id": 5,
      "title": "[MVP] 목표 관리 인터페이스 개발",
      "description": "목표 보기, 추적 및 관리를 위한 종합적인 UI 생성",
      "status": "pending",
      "dependencies": [
        3
      ],
      "priority": "high",
      "details": "일일, 주간 및 월간 목표에 대한 뷰를 설계하고 구현합니다. 목표 완료 추적을 위한 대화형 체크리스트를 만듭니다. 진행 시각화 컴포넌트(진행 막대, 차트)를 구축합니다. 목표 편집, 삭제 및 상태 업데이트 기능을 구현합니다. 목표에 대한 필터링 및 정렬 옵션을 추가합니다. 완료 상태 및 기록을 추적하도록 목표 모델을 업데이트합니다.",
      "testStrategy": "목표 CRUD 작업을 테스트합니다. 진행 추적 정확도를 확인합니다. 많은 목표가 있는 UI 응답성을 테스트합니다. 목표 상태 업데이트가 데이터베이스 및 UI에 반영되는지 검증합니다."
    },
    {
      "id": 6,
      "title": "[1차] 집중 타이머 기능 구현",
      "description": "사용자가 목표에 집중할 수 있도록 돕는 뽀모도로 및 커스텀 타이머 기능 구축",
      "status": "pending",
      "dependencies": [
        5
      ],
      "priority": "medium",
      "details": "뽀모도로 프리셋(25/5분 작업/휴식 주기) 및 사용자 지정 기간 옵션이 있는 타이머 컴포넌트를 만듭니다. 타이머 컨트롤(시작, 일시 중지, 재설정, 건너뛰기)을 구현합니다. Supabase에서 루틴/타이머 데이터 모델을 구축합니다. 타이머 세션을 특정 목표와 연결하는 기능을 추가합니다. 세션 기록 및 통계를 구현합니다. 타이머 이벤트에 대한 시각적 및 오디오 알림을 만듭니다.",
      "testStrategy": "다양한 세션 기간에 걸쳐 타이머 정확도를 테스트합니다. 사용자가 다른 페이지로 이동해도 타이머 상태가 유지되는지 확인합니다. 타이머 세션과 목표 간의 연결을 테스트합니다. 타이머 통계가 올바르게 계산되고 저장되는지 검증합니다."
    },
    {
      "id": 7,
      "title": "[2차] 알림 시스템 설정",
      "description": "리마인더 및 동기부여 콘텐츠를 위한 웹 푸시 알림 구현",
      "status": "pending",
      "dependencies": [
        5
      ],
      "priority": "low",
      "details": "Web Push API 통합을 설정합니다. 예약된 알림을 위한 Supabase Edge Functions를 구성합니다. 알림 권한 요청 흐름을 구현합니다. 다양한 유형(목표 리마인더, 동기부여 메시지)에 대한 알림 템플릿을 만듭니다. 설정에서 알림 기본 설정 UI를 구축합니다. 사용자 기본 설정 및 목표 마감일에 따라 알림 일정을 구현합니다.",
      "testStrategy": "다양한 브라우저에서 알림 전달을 테스트합니다. 예약된 알림이 올바른 시간에 트리거되는지 확인합니다. 알림에 대한 권한 처리를 테스트합니다. 알림 기본 설정이 존중되는지 검증합니다."
    },
    {
      "id": 8,
      "title": "[2차] 동기부여 콘텐츠 피드 생성",
      "description": "사용자 꿈과 관련된 동기부여 콘텐츠를 큐레이션하고 표시하는 시스템 개발",
      "status": "pending",
      "dependencies": [
        2,
        5
      ],
      "priority": "low",
      "details": "Supabase에서 MotivationContent 데이터 모델을 구현합니다. 다양한 콘텐츠 유형(인용구, 비디오, 기사)이 있는 콘텐츠 피드 UI를 만듭니다. 사용자 꿈에 대한 콘텐츠 태깅 및 관련성 매칭을 설정합니다. 기본 콘텐츠 추천 알고리즘을 구현합니다. 해당되는 경우 콘텐츠 소스에 대한 외부 API 통합을 추가합니다. 콘텐츠 북마크 기능을 만듭니다.",
      "testStrategy": "콘텐츠 로딩 및 표시를 테스트합니다. 사용자 꿈에 대한 콘텐츠 관련성을 확인합니다. 콘텐츠 필터링 및 정렬을 테스트합니다. 북마크 기능이 올바르게 작동하는지 검증합니다."
    },
    {
      "id": 9,
      "title": "[2차] 성취 및 피드백 시스템 구현",
      "description": "사용자 진행 상황을 추적하고, 피드백을 제공하며, 성취를 수여하는 시스템 구축",
      "status": "pending",
      "dependencies": [
        5,
        6
      ],
      "priority": "low",
      "details": "Supabase에서 Achievement 데이터 모델을 만듭니다. 사용자 행동 및 목표 완료에 기반한 성취 트리거를 구현합니다. 성취 배지 및 레벨을 설계하고 구현합니다. 사용자 진행 상황의 시각화가 포함된 주간/월간 보고서를 만듭니다. 일관된 목표 완료에 대한 연속 추적을 구현합니다. 성취 및 진행 보고서를 표시하기 위한 UI 컴포넌트를 구축합니다.",
      "testStrategy": "다양한 사용자 시나리오로 성취 트리거를 테스트합니다. 보고서 생성 정확도를 확인합니다. 연속 계산 로직을 테스트합니다. 성취가 올바르게 저장되고 표시되는지 검증합니다."
    },
    {
      "id": 10,
      "title": "[런칭] 설정 및 기록이 포함된 마이 페이지 개발",
      "description": "설정, 꿈 기록 및 앱 사용자 정의가 포함된 종합적인 사용자 프로필 페이지 생성",
      "status": "pending",
      "dependencies": [
        2,
        4,
        5,
        9
      ],
      "priority": "lowest",
      "details": "프로필, 꿈, 목표, 성취 및 설정 섹션이 있는 마이 페이지 UI를 설계하고 구현합니다. 필터링 및 정렬 옵션이 있는 꿈 기록 보기를 만듭니다. 알림, 테마 기본 설정 및 개인 정보 보호 옵션에 대한 설정을 구현합니다. 저장된 꿈 시각화를 볼 수 있는 시각화 갤러리를 추가합니다. 사용자 프로필 편집 기능을 만듭니다. 사용자 데이터에 대한 데이터 내보내기 옵션을 구현합니다.",
      "testStrategy": "올바른 데이터 표시를 위해 모든 마이 페이지 섹션을 테스트합니다. 설정 변경이 적용되고 유지되는지 확인합니다. 다양한 필터링 옵션이 있는 기록 보기를 테스트합니다. 프로필 편집 기능이 올바르게 작동하는지 검증합니다."
    }
  ],
  "metadata": {
    "projectName": "DreamCatcher Implementation",
    "totalTasks": 10,
    "sourceFile": "/Users/mac/Documents/DreamCatcher/scripts/prd.txt",
    "generatedAt": "2023-11-09"
  }
}