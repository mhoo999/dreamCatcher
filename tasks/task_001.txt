# Task ID: 1
# Title: [MVP] 프로젝트 인프라 및 인증 구축
# Status: pending
# Dependencies: None
# Priority: high
# Description: React 프로젝트 초기화, Supabase 통합 구성 및 사용자 인증 흐름 구현
# Details:
Create React App 또는 Vite를 사용하여 새 React 프로젝트를 생성합니다. 데이터베이스, 인증 및 스토리지를 위한 Supabase 클라이언트 구성을 설정합니다. Supabase Auth를 사용하여 이메일/비밀번호 인증으로 회원가입/로그인 컴포넌트를 구현합니다. 인증된 사용자를 위한 보호된 경로와 온보딩을 위한 공개 경로를 만듭니다. Vercel 또는 Netlify를 사용하여 자동 배포를 위한 CI/CD 파이프라인을 설정합니다.

# Test Strategy:
사용자 등록, 로그인 및 로그아웃 기능을 확인합니다. 보호된 경로가 인증되지 않은 사용자를 리디렉션하는지 테스트합니다. 인증 흐름에 대한 양식 유효성 검사 및 오류 처리를 검증합니다.

# Subtasks:
## 1. React 프로젝트 초기화 및 기본 구조 설정 [done]
### Dependencies: None
### Description: Vite를 사용하여 React 프로젝트를 초기화하고 필요한 기본 폴더 구조와 라이브러리를 설정합니다.
### Details:
1. Vite를 사용하여 React 프로젝트 생성: `npm create vite@latest my-app --template react-ts`
2. 필요한 기본 라이브러리 설치: `npm install react-router-dom axios styled-components`
3. 프로젝트 폴더 구조 설정:
   - `/src/components`: 재사용 가능한 UI 컴포넌트
   - `/src/pages`: 페이지 컴포넌트
   - `/src/hooks`: 커스텀 훅
   - `/src/utils`: 유틸리티 함수
   - `/src/services`: API 서비스
   - `/src/contexts`: React Context
4. 기본 라우팅 설정: React Router를 사용하여 기본 라우팅 구조 구현
5. 테스트: `npm run dev`로 프로젝트가 정상적으로 실행되는지 확인

## 2. Supabase 프로젝트 생성 및 클라이언트 설정 [pending]
### Dependencies: 1.1
### Description: Supabase 프로젝트를 생성하고 React 애플리케이션에 Supabase 클라이언트를 설정합니다.
### Details:
1. Supabase 계정 생성 및 새 프로젝트 설정
2. Supabase 클라이언트 라이브러리 설치: `npm install @supabase/supabase-js`
3. 환경 변수 설정:
   - `.env` 파일 생성
   - `VITE_SUPABASE_URL`과 `VITE_SUPABASE_ANON_KEY` 환경 변수 추가
4. Supabase 클라이언트 초기화 파일 생성 (`/src/services/supabase.ts`):
   ```typescript
   import { createClient } from '@supabase/supabase-js';
   
   const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
   const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
   
   export const supabase = createClient(supabaseUrl, supabaseAnonKey);
   ```
5. 테스트: 간단한 쿼리를 실행하여 Supabase 연결 확인

## 3. 인증 컴포넌트 및 인증 상태 관리 구현 [pending]
### Dependencies: 1.2
### Description: 회원가입, 로그인, 로그아웃 컴포넌트를 구현하고 인증 상태를 관리하는 Context를 생성합니다.
### Details:
1. 인증 Context 생성 (`/src/contexts/AuthContext.tsx`):
   - 현재 사용자 상태 관리
   - 로그인, 로그아웃, 회원가입 함수 제공
   - 인증 상태 로딩 처리
2. 회원가입 컴포넌트 구현 (`/src/components/auth/SignUp.tsx`):
   - 이메일, 비밀번호 입력 폼
   - Supabase Auth API를 사용한 회원가입 기능
   - 오류 처리 및 유효성 검사
3. 로그인 컴포넌트 구현 (`/src/components/auth/SignIn.tsx`):
   - 이메일, 비밀번호 입력 폼
   - Supabase Auth API를 사용한 로그인 기능
   - 오류 처리
4. 로그아웃 기능 구현
5. 테스트: 회원가입, 로그인, 로그아웃 기능이 정상적으로 작동하는지 확인

## 4. 보호된 라우트 및 인증 흐름 구현 [pending]
### Dependencies: 1.3
### Description: 인증된 사용자만 접근할 수 있는 보호된 라우트와 인증 흐름을 구현합니다.
### Details:
1. 보호된 라우트 컴포넌트 생성 (`/src/components/auth/ProtectedRoute.tsx`):
   - 인증되지 않은 사용자를 로그인 페이지로 리디렉션
   - 인증 상태 로딩 중 로딩 UI 표시
2. 공개 라우트 설정:
   - 로그인 페이지
   - 회원가입 페이지
   - 랜딩 페이지
3. 보호된 라우트 설정:
   - 대시보드
   - 프로필 페이지
   - 설정 페이지
4. 인증 상태에 따른 네비게이션 UI 조정
5. 세션 유지 기능 구현:
   - 페이지 새로고침 시 인증 상태 유지
   - 세션 만료 처리
6. 테스트: 인증되지 않은 사용자가 보호된 라우트에 접근할 수 없는지 확인

## 5. CI/CD 파이프라인 및 배포 환경 설정 [pending]
### Dependencies: 1.1, 1.2, 1.3, 1.4
### Description: Vercel 또는 Netlify를 사용하여 자동 배포를 위한 CI/CD 파이프라인을 설정합니다.
### Details:
1. 프로젝트 GitHub 저장소 설정:
   - 새 GitHub 저장소 생성
   - 프로젝트 코드 푸시
   - `.gitignore` 파일에 환경 변수 파일 추가
2. Vercel 계정 생성 및 프로젝트 설정:
   - GitHub 저장소 연결
   - 환경 변수 설정 (Supabase URL 및 API 키)
   - 빌드 설정 구성
3. 자동 배포 설정:
   - main 브랜치에 푸시 시 자동 배포 설정
   - 풀 리퀘스트에 대한 프리뷰 배포 설정
4. 커스텀 도메인 설정 (선택 사항)
5. 테스트: 코드 변경 사항을 푸시하여 자동 배포가 정상적으로 작동하는지 확인

