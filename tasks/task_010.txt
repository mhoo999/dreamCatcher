# Task ID: 10
# Title: [런칭] 홈 피드 및 프로필 페이지 개발
# Status: pending
# Dependencies: 2, 4, 5, 9
# Priority: lowest
# Description: 꿈 카드 피드와 기본 프로필 페이지 구현
# Details:
모든 꿈을 카드로 보여주는 홈 피드 UI를 설계하고 구현합니다. 꿈 카드 클릭 시 해당 꿈의 목표만 볼 수 있는 상세 페이지로 이동하는 기능을 구현합니다. 꿈 카드에 마감일, 진행률 등 주요 정보를 표시합니다. 기본적인 프로필 페이지를 구현하여 계정명을 표시합니다. 꿈 필터링 및 정렬 옵션을 추가합니다.

# Test Strategy:
홈 피드에서 꿈 카드가 올바르게 표시되는지 테스트합니다. 꿈 카드 클릭 시 상세 페이지로 정확히 이동하는지 확인합니다. 다양한 필터링 및 정렬 옵션이 올바르게 작동하는지 테스트합니다. 프로필 페이지에 계정명이 올바르게 표시되는지 검증합니다.

# Subtasks:
## 1. 홈 피드 UI 설계 및 구현 [done]
### Dependencies: None
### Description: 모든 꿈을 카드로 보여주는 홈 피드 UI를 구현합니다.
### Details:
1. 홈 피드 페이지 레이아웃 설계 및 구현
2. 꿈 카드 컴포넌트 디자인 및 구현 (제목, 설명, 마감일, 진행률 표시)
3. 꿈 데이터 조회 및 표시 로직 구현
4. 무한 스크롤 또는 페이지네이션 구현
5. 반응형 그리드 레이아웃 구현
6. 테스트: 홈 피드가 다양한 꿈 데이터와 화면 크기에서 올바르게 표시되는지 확인

<info added on 2025-05-03T07:43:06.518Z>
## 구현 세부 사항

### 1. 홈 피드 레이아웃 구현
```tsx
// src/pages/Dashboard.tsx
import { useEffect, useState } from 'react';
import DreamCard from '../components/dream/DreamCard';
import { fetchUserDreams } from '../services/supabase';
import { Dream } from '../types/dream';

export default function Dashboard() {
  const [dreams, setDreams] = useState<Dream[]>([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    async function loadDreams() {
      try {
        const data = await fetchUserDreams();
        setDreams(data);
      } catch (error) {
        console.error('Failed to load dreams:', error);
      } finally {
        setLoading(false);
      }
    }
    
    loadDreams();
  }, []);
  
  return (
    <div className="container mx-auto px-4 py-8 max-w-app">
      <h1 className="text-2xl font-bold mb-6">내 꿈 목록</h1>
      
      {loading ? (
        <div className="flex justify-center py-12">
          <LoadingSpinner />
        </div>
      ) : dreams.length === 0 ? (
        <EmptyState message="아직 등록된 꿈이 없습니다." actionText="꿈 추가하기" />
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {dreams.map(dream => (
            <DreamCard key={dream.id} dream={dream} />
          ))}
        </div>
      )}
    </div>
  );
}
```

### 2. 꿈 카드 컴포넌트 구현
```tsx
// src/components/dream/DreamCard.tsx
import { useNavigate } from 'react-router-dom';
import { Dream } from '../../types/dream';
import { formatDate } from '../../utils/dateUtils';

interface DreamCardProps {
  dream: Dream;
}

export default function DreamCard({ dream }: DreamCardProps) {
  const navigate = useNavigate();
  const progress = calculateProgress(dream); // 진행률 계산 함수
  
  return (
    <div 
      className="bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow p-5 cursor-pointer"
      onClick={() => navigate(`/dreams/${dream.id}`)}
    >
      <h3 className="font-semibold text-lg mb-2 truncate">{dream.title}</h3>
      <p className="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2">{dream.description}</p>
      
      <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-3">
        <span>마감일: {dream.deadline ? formatDate(dream.deadline) : '없음'}</span>
      </div>
      
      <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
        <div 
          className="bg-blue-600 h-2.5 rounded-full" 
          style={{ width: `${progress}%` }}
        ></div>
      </div>
      <div className="text-right text-xs mt-1">{progress}%</div>
    </div>
  );
}

function calculateProgress(dream: Dream): number {
  // 목표 달성률 계산 로직
  if (!dream.goals || dream.goals.length === 0) return 0;
  
  const completedGoals = dream.goals.filter(goal => goal.completed).length;
  return Math.round((completedGoals / dream.goals.length) * 100);
}
```

### 3. 데이터 페치 서비스
```tsx
// src/services/supabase.ts
import { supabase } from '../lib/supabaseClient';
import { Dream } from '../types/dream';

export async function fetchUserDreams(
  page = 1, 
  limit = 12
): Promise<Dream[]> {
  const offset = (page - 1) * limit;
  
  const { data, error } = await supabase
    .from('dreams')
    .select(`
      *,
      goals:dream_goals(*)
    `)
    .order('created_at', { ascending: false })
    .range(offset, offset + limit - 1);
    
  if (error) {
    console.error('Error fetching dreams:', error);
    throw error;
  }
  
  return data || [];
}
```

### 4. 무한 스크롤 구현
```tsx
// src/hooks/useInfiniteScroll.ts
import { useEffect, useState } from 'react';

export function useInfiniteScroll<T>(
  fetchFunction: (page: number, limit: number) => Promise<T[]>,
  limit = 12
) {
  const [items, setItems] = useState<T[]>([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  
  async function loadMore() {
    if (loading || !hasMore) return;
    
    setLoading(true);
    try {
      const newItems = await fetchFunction(page, limit);
      if (newItems.length < limit) {
        setHasMore(false);
      }
      setItems(prev => [...prev, ...newItems]);
      setPage(prev => prev + 1);
    } catch (error) {
      console.error('Failed to load more items:', error);
    } finally {
      setLoading(false);
    }
  }
  
  // 스크롤 감지 로직
  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + document.documentElement.scrollTop >= 
        document.documentElement.offsetHeight - 300 &&
        !loading && 
        hasMore
      ) {
        loadMore();
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [loading, hasMore]);
  
  return { items, loading, hasMore, loadMore };
}
```

### 5. 타입 정의
```tsx
// src/types/dream.ts
export interface Dream {
  id: string;
  title: string;
  description: string;
  deadline?: string; // ISO 날짜 문자열
  created_at: string;
  updated_at: string;
  user_id: string;
  goals: DreamGoal[];
}

export interface DreamGoal {
  id: string;
  dream_id: string;
  title: string;
  completed: boolean;
  created_at: string;
  updated_at: string;
}
```

### 테스트 고려사항
- 다양한 길이의 제목/설명에 대한 UI 테스트
- 목표가 없는 꿈의 진행률 표시 확인
- 스켈레톤 로딩 상태 구현 고려
- 데이터 없을 때 빈 상태 UI 확인
- 다크모드/라이트모드 전환 시 UI 확인
</info added on 2025-05-03T07:43:06.518Z>

## 2. 꿈 상세 페이지 구현 [done]
### Dependencies: 10.1
### Description: 꿈 카드 클릭 시 이동할 꿈 상세 페이지를 구현합니다.
### Details:
1. 꿈 상세 페이지 레이아웃 설계 및 구현
2. 꿈 정보 헤더 섹션 구현 (제목, 설명, 마감일, 진행률 등)
3. 해당 꿈에 연결된 목표 목록 표시 구현
4. 목표 필터링 및 정렬 옵션 구현
5. 꿈 편집 및 삭제 기능 구현
6. 새 목표 추가 기능 구현
7. 테스트: 꿈 상세 페이지가 올바른 꿈 데이터와 연결된 목표를 표시하는지 확인

## 3. 꿈 필터링 및 정렬 기능 구현 [done]
### Dependencies: 10.1
### Description: 홈 피드에서 꿈을 필터링하고 정렬할 수 있는 기능을 구현합니다.
### Details:
1. 필터 컴포넌트 디자인 및 구현
2. 마감일 기준 필터링 구현 (임박한 마감, 지난 마감 등)
3. 진행률 기준 필터링 구현 (완료율 높음/낮음 등)
4. 생성일/마감일/제목 기준 정렬 구현
5. 필터 및 정렬 상태 관리 구현
6. 테스트: 다양한 필터 및 정렬 옵션이 올바르게 작동하는지 확인

## 4. 꿈 검색 기능 구현 [pending]
### Dependencies: 10.1
### Description: 홈 피드에서 꿈을 검색할 수 있는 기능을 구현합니다.
### Details:
1. 검색 입력 컴포넌트 디자인 및 구현
2. 실시간 검색 결과 표시 구현
3. 검색 쿼리 처리 및 결과 필터링 로직 구현
4. 검색 결과 없음 상태 처리
5. 최근 검색어 저장 및 표시 기능 구현 (선택적)
6. 테스트: 다양한 검색 쿼리에 대해 올바른 결과가 표시되는지 확인

## 5. 프로필 페이지 구현 [pending]
### Dependencies: None
### Description: 사용자 계정명을 표시하는 기본 프로필 페이지를 구현합니다.
### Details:
1. 프로필 페이지 레이아웃 설계 및 구현
2. 사용자 계정명 표시 구현
3. 프로필 편집 기능 구현 (계정명 변경)
4. 로그아웃 기능 구현
5. 계정 설정 옵션 구현 (비밀번호 변경 등)
6. 테스트: 프로필 페이지가 올바른 사용자 정보를 표시하고 편집 기능이 작동하는지 확인

## 6. 탭 네비게이션 구현 [pending]
### Dependencies: 10.1, 10.5
### Description: 홈, 꿈, 목표, 프로필 탭 간의 네비게이션을 구현합니다.
### Details:
1. 하단 탭 네비게이션 바 디자인 및 구현
2. 탭 전환 애니메이션 구현
3. 활성 탭 표시 구현
4. 탭별 라우팅 설정
5. 모바일/데스크톱 반응형 네비게이션 구현
6. 테스트: 탭 네비게이션이 올바르게 작동하고 현재 활성 탭이 표시되는지 확인

