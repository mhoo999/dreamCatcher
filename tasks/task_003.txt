# Task ID: 3
# Title: [MVP] AI 기반 목표 제안 시스템 개발
# Status: pending
# Dependencies: 2
# Priority: high
# Description: 사용자 꿈을 기반으로 개인화된 목표를 생성하기 위한 Perplexity API 통합
# Details:
Perplexity API 통합을 설정합니다. 사용자 꿈 데이터를 처리하고 적절한 목표를 생성하는 서비스를 만듭니다. Supabase에서 목표 데이터 모델을 구현하고 dreamId로 꿈과 연결합니다. 품질 목표 제안을 보장하기 위한 AI 프롬프트 엔지니어링을 설계합니다. 사용자가 제안된 목표를 편집, 우선순위 지정 또는 거부할 수 있는 옵션이 있는 UI를 구축합니다.

# Test Strategy:
샘플 꿈 입력으로 API 통합을 테스트합니다. 목표 생성 품질 및 관련성을 확인합니다. 최소한의 또는 비정상적인 꿈 설명이 있는 엣지 케이스를 테스트합니다. 데이터베이스에서 목표 저장 및 검색을 검증합니다.

# Subtasks:
## 1. Perplexity API 연동 및 기본 통신 설정 [done]
### Dependencies: None
### Description: AI 서비스와의 통신을 위한 기본 인프라 구축 및 API 연동 설정
### Details:
1. Perplexity API 키 발급 및 환경 변수 설정
2. API 클라이언트 래퍼 클래스 구현 (요청 전송, 응답 처리, 오류 처리)
3. API 호출 제한 및 비용 관리를 위한 레이트 리미팅 구현
4. 기본 프롬프트 템플릿 구조 설계
5. 간단한 테스트 엔드포인트 구현으로 API 연결 확인
6. 테스트: 기본 프롬프트로 API 응답 확인 및 응답 형식 검증

## 2. Supabase 꿈과 목표 데이터 모델 설계 및 구현 [done]
### Dependencies: None
### Description: 사용자 꿈과 생성된 목표를 저장하기 위한 데이터베이스 스키마 설계 및 구현
### Details:
1. 사용자, 꿈, 목표 간의 관계를 정의하는 ERD 설계
2. Supabase에 필요한 테이블 생성 (users, dreams, goals)
3. Dream 테이블에 deadline 필드 추가
4. Goal 테이블에 dreamId 외래 키 필드 추가하여 꿈과 목표 연결
5. 목표 상태 관리를 위한 필드 추가 (제안됨, 수락됨, 거부됨, 완료됨 등)
6. 필요한 인덱스 및 외래 키 제약 조건 설정
7. TypeScript 인터페이스/타입 정의
8. 테스트: CRUD 작업을 통한 데이터 모델 검증

<info added on 2025-05-03T07:57:11.853Z>
## Supabase 데이터 모델 구현 상세 정보

### 1. 보안 정책(RLS) 설정
```sql
-- dreams 테이블 RLS
alter table dreams enable row level security;
create policy "사용자는 자신의 꿈만 볼 수 있음" on dreams
  for select using (auth.uid() = user_id);
create policy "사용자는 자신의 꿈만 생성할 수 있음" on dreams
  for insert with check (auth.uid() = user_id);
create policy "사용자는 자신의 꿈만 수정할 수 있음" on dreams
  for update using (auth.uid() = user_id);
create policy "사용자는 자신의 꿈만 삭제할 수 있음" on dreams
  for delete using (auth.uid() = user_id);

-- goals 테이블 RLS
alter table goals enable row level security;
create policy "사용자는 자신의 꿈에 연결된 목표만 접근 가능" on goals
  for all using (auth.uid() = (select user_id from dreams where id = goals.dream_id));
```

### 2. 인덱스 설정
```sql
-- 성능 최적화를 위한 인덱스
create index dreams_user_id_idx on dreams(user_id);
create index goals_dream_id_idx on goals(dream_id);
create index goals_status_idx on goals(status);
```

### 3. 목표 상태 관리를 위한 ENUM 타입
```sql
create type goal_status as enum ('proposed', 'accepted', 'rejected', 'completed', 'in_progress');
-- goals 테이블의 status 필드 타입 변경
alter table goals alter column status type goal_status using status::goal_status;
```

### 4. 트리거 함수 구현 (updated_at 자동 갱신)
```sql
create or replace function update_modified_column()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger update_dreams_modtime
before update on dreams
for each row execute function update_modified_column();

create trigger update_goals_modtime
before update on goals
for each row execute function update_modified_column();
```

### 5. 데이터 검증 함수 예시
```typescript
// src/utils/validation.ts
export const validateDream = (dream: Partial<Dream>): boolean => {
  if (!dream.title || dream.title.trim().length < 3) return false;
  if (dream.deadline && new Date(dream.deadline) < new Date()) return false;
  return true;
};

export const validateGoal = (goal: Partial<Goal>): boolean => {
  if (!goal.title || goal.title.trim().length < 3) return false;
  if (!goal.dream_id) return false;
  return true;
};
```

### 6. 테스트 쿼리 예시
```sql
-- 특정 사용자의 모든 꿈과 관련 목표 조회
select d.*, 
  (select json_agg(g.*) from goals g where g.dream_id = d.id) as goals
from dreams d
where d.user_id = '[USER_ID]';

-- 상태별 목표 통계
select d.title as dream_title, 
  count(g.id) filter (where g.status = 'proposed') as proposed_goals,
  count(g.id) filter (where g.status = 'accepted') as accepted_goals,
  count(g.id) filter (where g.status = 'completed') as completed_goals
from dreams d
left join goals g on d.id = g.dream_id
where d.user_id = '[USER_ID]'
group by d.id;
```
</info added on 2025-05-03T07:57:11.853Z>

## 3. AI 프롬프트 엔지니어링 및 목표 생성 로직 개발 [done]
### Dependencies: 3.1, 3.2
### Description: 사용자 꿈 데이터를 분석하고 적절한 목표를 생성하기 위한 AI 프롬프트 설계
### Details:
1. 효과적인 목표 생성을 위한 프롬프트 템플릿 설계
2. 꿈 데이터에서 핵심 주제와 패턴을 추출하는 프롬프트 개발
3. SMART 목표 원칙(구체적, 측정 가능, 달성 가능, 관련성, 시간 제한)을 적용한 프롬프트 구성
4. 목표 품질 향상을 위한 프롬프트 반복 테스트 및 개선
5. 응답 파싱 및 구조화 로직 구현
6. 테스트: 다양한 꿈 시나리오에 대한 목표 생성 품질 평가

## 4. 꿈 데이터 처리 및 목표 생성 서비스 구현 [done]
### Dependencies: 3.1, 3.2, 3.3
### Description: 사용자 꿈 데이터를 수집하고 AI를 통해 목표로 변환하는 서비스 개발
### Details:
1. 꿈 데이터 입력 및 처리를 위한 서비스 레이어 구현
2. 꿈 데이터를 AI 프롬프트에 통합하는 로직 개발
3. AI 응답에서 목표 데이터 추출 및 구조화
4. 생성된 목표를 Supabase에 저장하고 dreamId로 연결하는 기능 구현
5. 목표 중복 방지 및 품질 검증 로직 추가
6. 비동기 처리를 위한 작업 큐 구현 (선택적)
7. 테스트: 전체 파이프라인 통합 테스트 (꿈 입력부터 목표 저장까지)

<info added on 2025-05-03T08:19:58.595Z>
## AI 목표 생성 및 저장 로직 구현 세부사항

### 데이터 흐름 구조
- `DreamInput` 컴포넌트에서 꿈 저장 후 반환된 `dream_id`를 활용하여 목표 연결
- AI 응답 파싱 시 정규식 패턴 활용: `/^[\d\s\-\•\*]+|^\s*$/gm`으로 숫자/대시/빈줄 제거

### 목표 품질 검증 로직
- 최소 길이(10자) 및 최대 길이(100자) 검증
- 중복 목표 필터링 (Levenshtein 거리 알고리즘 활용, 유사도 80% 이상 제외)
- 부적절한 내용 필터링 (금지어 목록 활용)

### 오류 처리 메커니즘
- AI 응답 실패 시 재시도 로직 (최대 3회)
- 목표 저장 실패 시 트랜잭션 롤백 구현
- 사용자에게 진행 상태 표시 (로딩 인디케이터 및 단계별 피드백)

### 성능 최적화
- 목표 일괄 저장 시 Supabase `.insert()` 배치 처리 활용
- 비동기 처리를 위한 Promise.all 패턴 적용
- 대용량 응답 처리를 위한 청크 분할 메커니즘

### 테스트 케이스
- 다양한 꿈 입력에 대한 AI 응답 일관성 검증
- 에러 상황 시뮬레이션 및 복구 테스트
- 목표 품질 검증 로직 유닛 테스트
</info added on 2025-05-03T08:19:58.595Z>

## 5. 목표 관리 API 엔드포인트 개발 [pending]
### Dependencies: 3.2, 3.4
### Description: 목표 조회, 편집, 우선순위 지정, 거부 등을 위한 RESTful API 개발
### Details:
1. 모든 목표 조회 엔드포인트 구현
2. 꿈별 목표 조회 엔드포인트 구현 (dreamId 기준 필터링)
3. 목표 상세 조회 엔드포인트 구현
4. 목표 수정 엔드포인트 구현 (사용자 편집 지원)
5. 목표 상태 변경 엔드포인트 구현 (수락, 거부, 완료 등)
6. 목표 우선순위 지정 엔드포인트 구현
7. 목표 삭제 엔드포인트 구현
8. API 인증 및 권한 검사 로직 추가
9. 테스트: Postman/Insomnia를 사용한 API 엔드포인트 테스트

## 6. 목표 제안 및 관리 UI 구현 [pending]
### Dependencies: 3.5
### Description: 사용자가 제안된 목표를 확인하고 관리할 수 있는 사용자 인터페이스 개발
### Details:
1. 꿈 상세 페이지에서 해당 꿈의 목표 목록 UI 구현
2. 목표 카드 컴포넌트 개발 (목표 내용, 상태, 우선순위 표시)
3. 목표 편집 모달/페이지 구현
4. 목표 수락/거부/완료 기능 UI 구현
5. 목표 우선순위 드래그 앤 드롭 기능 구현
6. 새로운 목표 제안 요청 UI 구현
7. 반응형 디자인 적용 (모바일/데스크톱)
8. 테스트: 사용자 시나리오 기반 UI 테스트 및 사용성 평가

